---
name: Build examples
on:
  schedule:
    - cron: '0 0 * * *'
  pull_request:
    types:
      - opend
      - reopened
      - synchronize
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      # run other jobs even when one job failed
      fail-fast: false

      # releases, see https://github.com/espressif/esp-idf#esp-idf-release-support-schedule
      matrix:
        esp_idf_version:
          - latest
          - release-v5.1
          - release-v5.0
          - release-v4.4
          - release-v4.3
        target:
          - esp32
          - esp32s2
          - esp32s3
          - esp32c3
          - esp32c3
          - esp32c6
          - esp32h2
    steps:
      - name: Install packages
        run: |
          sudo snap install yq
          which yq

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: esp-idf build
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: ${{ matrix.esp_idf_version }}
          target: ${{ matrix.target }}
          path: examples
          command: |

            # see suppot matrix at https://github.com/espressif/esp-idf#esp-idf-release-and-soc-compatibility
            should_skip=0
            if [ "${{ matrix.target }}" = "esp32s3" -a "${{ matrix.esp_idf_version }}" = "release-v4.3" ]; then
              should_skip=1
            fi
            if [ "${{ matrix.target }}" = "esp32c2" -a "${{ matrix.esp_idf_version }}" = "release-v4.3" ]; then
              should_skip=1
            fi
            if [ "${{ matrix.target }}" = "esp32c2" -a "${{ matrix.esp_idf_version }}" = "release-v4.4" ]; then
              should_skip=1
            fi
            if [ "${{ matrix.target }}" = "esp32c6" -a "${{ matrix.esp_idf_version }}" = "release-v4.3" ]; then
              should_skip=1
            fi
            if [ "${{ matrix.target }}" = "esp32c6" -a "${{ matrix.esp_idf_version }}" = "release-v4.4" ]; then
              should_skip=1
            fi
            if [ "${{ matrix.target }}" = "esp32c6" -a "${{ matrix.esp_idf_version }}" = "release-v5.0" ]; then
              should_skip=1
            fi
            if [ "${{ matrix.target }}" = "esp32h2" -a "${{ matrix.esp_idf_version }}" = "release-v4.3" ]; then
              should_skip=1
            fi
            if [ "${{ matrix.target }}" = "esp32h2" -a "${{ matrix.esp_idf_version }}" = "release-v4.4" ]; then
              should_skip=1
            fi
            if [ "${{ matrix.target }}" = "esp32h2" -a "${{ matrix.esp_idf_version }}" = "release-v5.0" ]; then
              should_skip=1
            fi

            if [ ${should_skip} -ne 0 ]; then
              echo "Skipping build because ${{ matrix.esp_idf_version }} does not support ${{ matrix.target }}"
              exit 0
            fi

            components=`echo components/* | sed -e "s|/ ||g"`
            echo "Available components: ${components}"

            # See if the component supports the target
            export PATH=${PATH}:/snap/bin
            is_supported=0
            for C in ${components}; do
              if [ -f "components/${C}/.eil.yml" ]; then
                echo "Component, ${C}, does not have .eil.yml"
                exit 1
              fi
              supported_targets=`cat components/${C}/.eil.yml | yq -o json ".[][0] | .targets | .[] | .name"`
              for T in ${supported_targets}; do
                if [ "${{ matrix.target }}" = "${T}" ]; then
                  is_supported=1
                fi
                if [ "${{ matrix.target }}" = "all" ]; then
                  is_supported=1
                fi
              done
              if [ is_supported -eq 0 ]; then
                echo "Component, ${C}, does not support ${{ matrix.target }}. Skipping"
                exit 0
              else
                echo "Component, ${C}, supports ${{ matrix.target }}"."
              fi

              EXAMPLES=`echo ${C}/*`
              for D in ${EXAMPLES}; do
                echo "Building example ${D} for target ${C}"
                cd ${D} && idf.py build
              done
            done
